# This workflow will build a docker container, publish and deploy it to Tencent Kubernetes Engine (TKE) when there is a push to the master branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Tencent Kubernetes Engine cluster, 
#    including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: 
#    - TENCENT_CLOUD_SECRET_ID with Tencent Cloud secret id
#    - TENCENT_CLOUD_SECRET_KEY with Tencent Cloud secret key 
#    - TENCENT_CLOUD_ACCOUNT_ID with Tencent Cloud account id
#    - TKE_REGISTRY_PASSWORD with TKE registry password
#
# 3. Change the values for the TKE_IMAGE_URL, TKE_REGION, TKE_CLUSTER_ID and DEPLOYMENT_NAME environment variables (below).

name: Tencent Kubernetes Engine

on:
  push:
    branches:
      - master

# Environment variables available to all jobs and steps in this workflow
env:
  TKE_DOCKER_HUB: ccr.ccs.tencentyun.com
  TKE_IMAGE_URL: ccr.ccs.tencentyun.com/hejunwei/notify-service
  TKE_REGION: ap-chengdu
  TKE_CLUSTER_ID: cls-kj6srqvx
  DEPLOYMENT_NAME: notify-service

jobs:

  docker-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # build go
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - name: Build Go
      run: CGO_ENABLED=0 GOOS=linux go build -v .

    - name: Test Go
      run: go test -v

    - name: Generate env file
      run: sed -e 's/TENCENT_MAIL_ADDRESS=/TENCENT_MAIL_ADDRESS=${{secrets.TENCENT_MAIL_ADDRESS}}/'
        -e 's/TENCENT_MAIL_PASSWORD=/TENCENT_MAIL_PASSWORD=${{secrets.TENCENT_MAIL_PASSWORD}}/'
        -e 's/ALIYUN_ACCESS_KEY_ID=/ALIYUN_ACCESS_KEY_ID=${{secrets.ALIYUN_ACCESS_KEY_ID}}/'
        -e 's/ALIYUN_ACCESS_KEY_SECRET=/ALIYUN_ACCESS_KEY_SECRET=${{secrets.ALIYUN_ACCESS_KEY_SECRET}}/'
        -e 's/ALIYUN_SMS_SIGN_NAME=/ALIYUN_SMS_SIGN_NAME=${{secrets.ALIYUN_SMS_SIGN_NAME}}/'
        -e 's/ALIYUN_SMS_TEMPLATE_CODE=/ALIYUN_SMS_TEMPLATE_CODE=${{secrets.ALIYUN_SMS_TEMPLATE_CODE}}/' .env.example > .env
    # Build Docker
    - name: Build Docker image
      run: |        
        docker build -t ${TKE_IMAGE_URL}:${GITHUB_SHA} .

    - name: Login TKE Registry
      run: |
        docker login ${TKE_DOCKER_HUB} --username="${{secrets.TENCENT_CLOUD_ACCOUNT_ID}}" -p "${{ secrets.TKE_REGISTRY_PASSWORD }}"

    # Push the Docker image to TKE Registry
    - name: Publish
      run: |
        docker push ${TKE_IMAGE_URL}:${GITHUB_SHA}

    - name: Set up Kustomize
      run: |
        curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    - name: Set up ~/.kube/config for connecting TKE cluster
      uses: TencentCloud/tke-cluster-credential-action@v1
      with:
        secret_id: ${{ secrets.TENCENT_CLOUD_SECRET_ID }}
        secret_key: ${{ secrets.TENCENT_CLOUD_SECRET_KEY }}
        tke_region: ${{ env.TKE_REGION }}
        cluster_id: ${{ env.TKE_CLUSTER_ID }}
    
    - name: Deploy
      run: |
        kubectl config use-context ${TKE_CLUSTER_ID}-context-default
        kubectl set image deployment/${DEPLOYMENT_NAME} notify-service-container=${TKE_IMAGE_URL}:${GITHUB_SHA}